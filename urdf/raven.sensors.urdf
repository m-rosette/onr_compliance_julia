<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from raven.sensors.xacro            | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="raven">
  <gazebo reference="raven/oculus">
    <sensor name="oculus" type="depth">
      <visualize>true</visualize>
      <always_on>true</always_on>
      <update_rate>10</update_rate>
      <camera>
        <horizontal_fov>1.0471975511965976</horizontal_fov>
        <image>
          <width>512</width>
          <height>102</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.1</near>
          <!-- optimal 2m-60m -->
          <far>10.0</far>
        </clip>
        <depth_camera>
          <output>depths</output>
        </depth_camera>
        <save enabled="true">
          <path>/tmp/camera</path>
        </save>
      </camera>
      <plugin filename="libnps_multibeam_sonar_ros_plugin.so" name="forward_sonar">
        <sonarFreq>2100000.0</sonarFreq>
        <bandwidth>29.9e3</bandwidth>
        <soundSpeed>1500</soundSpeed>
        <sourceLevel>220</sourceLevel>
        <maxDistance>10.0</maxDistance>
        <constantReflectivity>true</constantReflectivity>
        <!-- I tried increasing this to get higher resolution in elevation,
	       but values of 1, 2, 5 just led to blank images. -->
        <raySkips>10</raySkips>
        <sensorGain>0.02</sensorGain>
        <plotScaler>10</plotScaler>
        <writeLog>false</writeLog>
        <debugFlag>false</debugFlag>
        <writeFrameInterval>5</writeFrameInterval>
        <!-- This name is prepended to ROS topics -->
        <cameraName>raven/oculus</cameraName>
        <!-- ROS publication topics -->
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>image_raw/camera_info</cameraInfoTopicName>
        <pointCloudTopicName>point_cloud</pointCloudTopicName>
        <depthImageTopicName>image_depth</depthImageTopicName>
        <depthImageCameraInfoTopicName>image_depth/camera_info</depthImageCameraInfoTopicName>
        <sonarImageRawTopicName>sonar_image</sonarImageRawTopicName>
        <sonarImageTopicName>drawn_sonar_image</sonarImageTopicName>
        <frameName>oculus</frameName>
      </plugin>
    </sensor>
  </gazebo>
  <!-- Parameters:
      * robotNamespace: base name of all topics published
      * robotNamespace:  ds_sensor_msgs/Dvl will be published to $robotNamespace/$rangesTopicName
      * frameName: Frame that the dvl message will be published in
  -->
  <!-- The published point cloud shows the beam vectors. I do not
      know why it requires it to be in the base_link frame rather
      than the dvl frame. (Assumption is built-in; no calls to tf
      are made.)
  -->
  <gazebo reference="raven/dvl">
    <sensor name="dvl_sensor" type="dsros_dvl">
      <always_on>1</always_on>
      <update_rate>8</update_rate>
      <pose frame="">0 0 0 3.14159 0 0</pose>
      <plugin filename="libdsros_ros_dvl.so" name="dvl_plugin">
        <robotNamespace>raven</robotNamespace>
        <topicName>dvl</topicName>
        <rangesTopicName>ranges</rangesTopicName>
        <frameName>raven/dvl</frameName>
        <pointcloudFrame>raven/base_link</pointcloudFrame>
        <updateRateHZ>8.0</updateRateHZ>
        <gaussianNoiseBeamVel>0.005</gaussianNoiseBeamVel>
        <gaussianNoiseBeamWtrVel>0.015</gaussianNoiseBeamWtrVel>
        <gaussianNoiseBeamRange>0.1</gaussianNoiseBeamRange>
        <minRange>0.2</minRange>
        <maxRange>75.0</maxRange>
        <maxRangeDiff>10</maxRangeDiff>
        <beamAngleDeg>25.0</beamAngleDeg>
        <beamWidthDeg>3.0</beamWidthDeg>
        <beamAzimuthDeg1>-135</beamAzimuthDeg1>
        <beamAzimuthDeg2>135</beamAzimuthDeg2>
        <beamAzimuthDeg3>45</beamAzimuthDeg3>
        <beamAzimuthDeg4>-45</beamAzimuthDeg4>
        <enableWaterTrack>1</enableWaterTrack>
        <waterTrackBins>10</waterTrackBins>
        <currentProfileCoordMode>0</currentProfileCoordMode>
        <pos_z_down>1</pos_z_down>
        <collide_bitmask>0x0001</collide_bitmask>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="raven/stereo_left">
    <sensor name="raven/stereo_left" type="camera">
      <!-- It seems that Gazebo expects the camera pose to have
	           the X-axis as the optical axis, with Y as width and
             Z as height. However, the origin is in the bottom-left
	           of the image, so we have positive PI/2 roll. -->
      <pose> 0.0 0.0 0.0 1.57 -1.57 0.0 </pose>
      <always_on>false</always_on>
      <update_rate>5</update_rate>
      <visualize>true</visualize>
      <camera>
        <horizontal_fov>1.274</horizontal_fov>
        <image>
          <width>2464</width>
          <height>2056</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.15</near>
          <far>100</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <cameraName>raven/stereo_left</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>raven/stereo_left</frameName>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="raven/stereo_right">
    <sensor name="raven/stereo_right" type="camera">
      <!-- It seems that Gazebo expects the camera pose to have
	           the X-axis as the optical axis, with Y as width and
             Z as height. However, the origin is in the bottom-left
	           of the image, so we have positive PI/2 roll. -->
      <pose> 0.0 0.0 0.0 1.57 -1.57 0.0 </pose>
      <always_on>false</always_on>
      <update_rate>5</update_rate>
      <visualize>true</visualize>
      <camera>
        <horizontal_fov>1.274</horizontal_fov>
        <image>
          <width>2464</width>
          <height>2056</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.15</near>
          <far>100</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <cameraName>raven/stereo_right</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>raven/stereo_right</frameName>
      </plugin>
    </sensor>
  </gazebo>
  <!-- TODO: Consider turning gravity back off for all of sensor head?
       ... I'm not sure how its mass interacts with raven's. -->
  <!--
  <gazebo reference="right_camera">
    <gravity>0</gravity>
  </gazebo>
  -->
</robot>
